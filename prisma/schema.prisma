// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  referentialIntegrity = "prisma"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  passwordHash String
  dateOfBirth DateTime
  phoneNumber String
  orders Order[]
  reviews Review[]
  shippingAddress ShippingAddress[]
  cart Cart?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem { 
  id Int @id @default(autoincrement())
  quantity Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int 
  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId Int
  order Order[]
}

model Cart {
  id Int @id @default(autoincrement())
  cartItems CartItem[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int @unique 
  total Float
}
model Product {
  id Int @id @default(autoincrement())
  name String
  description String
  price Float
  images Images[]
  thumbnail String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  rating Float
  stock Int
  cartItems CartItem[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Images {
  id Int @id @default(autoincrement())
  url String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Category {
  id Int @id @default(autoincrement())
  strName String @unique
  name String
  image String
  products Product[]
}

model Review {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  rating Int
  comment String
  createdAt DateTime @default(now())
}

model Order {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  cartItems CartItem[] 
  shippingAddress ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade)
  shippingAddressId Int @unique
  taxPrice Int
  shippingPrice Int
  totalPrice Int
  isPaid Boolean
  paidAt DateTime
  isDelivered Boolean
  deliveredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  streetAddress String
  city String
  parish String
  order Order?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
